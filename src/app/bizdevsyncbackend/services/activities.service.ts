/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { activitiesBusinessesBusinessIdGet } from '../fn/activities/activities-businesses-business-id-get';
import { ActivitiesBusinessesBusinessIdGet$Params } from '../fn/activities/activities-businesses-business-id-get';
import { activitiesCreatePost } from '../fn/activities/activities-create-post';
import { ActivitiesCreatePost$Params } from '../fn/activities/activities-create-post';
import { activitiesDeleteIdDelete } from '../fn/activities/activities-delete-id-delete';
import { ActivitiesDeleteIdDelete$Params } from '../fn/activities/activities-delete-id-delete';
import { activitiesFollowupsFollowupIdGet } from '../fn/activities/activities-followups-followup-id-get';
import { ActivitiesFollowupsFollowupIdGet$Params } from '../fn/activities/activities-followups-followup-id-get';
import { activitiesGetAllGet } from '../fn/activities/activities-get-all-get';
import { ActivitiesGetAllGet$Params } from '../fn/activities/activities-get-all-get';
import { activitiesGetByIdIdGet } from '../fn/activities/activities-get-by-id-id-get';
import { ActivitiesGetByIdIdGet$Params } from '../fn/activities/activities-get-by-id-id-get';
import { activitiesUpdateIdPut } from '../fn/activities/activities-update-id-put';
import { ActivitiesUpdateIdPut$Params } from '../fn/activities/activities-update-id-put';
import { Activity } from '../models/activity';

@Injectable({ providedIn: 'root' })
export class ActivitiesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `activitiesCreatePost()` */
  static readonly ActivitiesCreatePostPath = '/activities/create';

  /**
   * Create a new activity.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activitiesCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  activitiesCreatePost$Response(params: ActivitiesCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Activity>> {
    return activitiesCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new activity.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activitiesCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  activitiesCreatePost(params: ActivitiesCreatePost$Params, context?: HttpContext): Observable<Activity> {
    return this.activitiesCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Activity>): Activity => r.body)
    );
  }

  /** Path part for operation `activitiesGetAllGet()` */
  static readonly ActivitiesGetAllGetPath = '/activities/get-all';

  /**
   * Get all activities of the logged-in user (paginated).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activitiesGetAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesGetAllGet$Response(params?: ActivitiesGetAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Activity>;
}>> {
    return activitiesGetAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all activities of the logged-in user (paginated).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activitiesGetAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesGetAllGet(params?: ActivitiesGetAllGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Activity>;
}> {
    return this.activitiesGetAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Activity>;
}>): {
'count'?: number;
'rows'?: Array<Activity>;
} => r.body)
    );
  }

  /** Path part for operation `activitiesGetByIdIdGet()` */
  static readonly ActivitiesGetByIdIdGetPath = '/activities/get-by-id/{id}';

  /**
   * Get an activity by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activitiesGetByIdIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesGetByIdIdGet$Response(params: ActivitiesGetByIdIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return activitiesGetByIdIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get an activity by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activitiesGetByIdIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesGetByIdIdGet(params: ActivitiesGetByIdIdGet$Params, context?: HttpContext): Observable<void> {
    return this.activitiesGetByIdIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `activitiesFollowupsFollowupIdGet()` */
  static readonly ActivitiesFollowupsFollowupIdGetPath = '/activities/followups/{followupId}';

  /**
   * Get paginated activities for a followup.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activitiesFollowupsFollowupIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesFollowupsFollowupIdGet$Response(params: ActivitiesFollowupsFollowupIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Activity>;
}>> {
    return activitiesFollowupsFollowupIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get paginated activities for a followup.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activitiesFollowupsFollowupIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesFollowupsFollowupIdGet(params: ActivitiesFollowupsFollowupIdGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Activity>;
}> {
    return this.activitiesFollowupsFollowupIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Activity>;
}>): {
'count'?: number;
'rows'?: Array<Activity>;
} => r.body)
    );
  }

  /** Path part for operation `activitiesBusinessesBusinessIdGet()` */
  static readonly ActivitiesBusinessesBusinessIdGetPath = '/activities/businesses/{businessId}';

  /**
   * Get paginated activities for a business.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activitiesBusinessesBusinessIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesBusinessesBusinessIdGet$Response(params: ActivitiesBusinessesBusinessIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Activity>;
}>> {
    return activitiesBusinessesBusinessIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get paginated activities for a business.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activitiesBusinessesBusinessIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesBusinessesBusinessIdGet(params: ActivitiesBusinessesBusinessIdGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Activity>;
}> {
    return this.activitiesBusinessesBusinessIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Activity>;
}>): {
'count'?: number;
'rows'?: Array<Activity>;
} => r.body)
    );
  }

  /** Path part for operation `activitiesUpdateIdPut()` */
  static readonly ActivitiesUpdateIdPutPath = '/activities/update/{id}';

  /**
   * Update an activity.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activitiesUpdateIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  activitiesUpdateIdPut$Response(params: ActivitiesUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return activitiesUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an activity.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activitiesUpdateIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  activitiesUpdateIdPut(params: ActivitiesUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.activitiesUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `activitiesDeleteIdDelete()` */
  static readonly ActivitiesDeleteIdDeletePath = '/activities/delete/{id}';

  /**
   * Archive an activity.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activitiesDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesDeleteIdDelete$Response(params: ActivitiesDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return activitiesDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive an activity.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activitiesDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  activitiesDeleteIdDelete(params: ActivitiesDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.activitiesDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
