/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Gateway } from '../models/gateway';
import { gatewayCreatePost } from '../fn/auth/gateway-create-post';
import { GatewayCreatePost$Params } from '../fn/auth/gateway-create-post';
import { User } from '../models/user';
import { userActivateAccountPost } from '../fn/auth/user-activate-account-post';
import { UserActivateAccountPost$Params } from '../fn/auth/user-activate-account-post';
import { userChangePasswordPut } from '../fn/auth/user-change-password-put';
import { UserChangePasswordPut$Params } from '../fn/auth/user-change-password-put';
import { userLoginPost } from '../fn/auth/user-login-post';
import { UserLoginPost$Params } from '../fn/auth/user-login-post';
import { userRegisterPost } from '../fn/auth/user-register-post';
import { UserRegisterPost$Params } from '../fn/auth/user-register-post';
import { userResetPasswordPost } from '../fn/auth/user-reset-password-post';
import { UserResetPasswordPost$Params } from '../fn/auth/user-reset-password-post';
import { userStaffUpdateIdPut } from '../fn/auth/user-staff-update-id-put';
import { UserStaffUpdateIdPut$Params } from '../fn/auth/user-staff-update-id-put';
import { userUpdateProfileIdPut } from '../fn/auth/user-update-profile-id-put';
import { UserUpdateProfileIdPut$Params } from '../fn/auth/user-update-profile-id-put';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `gatewayCreatePost()` */
  static readonly GatewayCreatePostPath = '/gateway/create';

  /**
   * Create a new payment gateway (staff biz dev by default).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `gatewayCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  gatewayCreatePost$Response(params: GatewayCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Gateway>> {
    return gatewayCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new payment gateway (staff biz dev by default).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `gatewayCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  gatewayCreatePost(params: GatewayCreatePost$Params, context?: HttpContext): Observable<Gateway> {
    return this.gatewayCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Gateway>): Gateway => r.body)
    );
  }

  /** Path part for operation `userRegisterPost()` */
  static readonly UserRegisterPostPath = '/user/register';

  /**
   * Register a new user (solo biz dev by default).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userRegisterPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  userRegisterPost$Response(params: UserRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return userRegisterPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Register a new user (solo biz dev by default).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userRegisterPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  userRegisterPost(params: UserRegisterPost$Params, context?: HttpContext): Observable<User> {
    return this.userRegisterPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `userActivateAccountPost()` */
  static readonly UserActivateAccountPostPath = '/user/activate-account';

  /**
   * Activate user account with code.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userActivateAccountPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userActivateAccountPost$Response(params: UserActivateAccountPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userActivateAccountPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Activate user account with code.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userActivateAccountPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userActivateAccountPost(params: UserActivateAccountPost$Params, context?: HttpContext): Observable<void> {
    return this.userActivateAccountPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `userLoginPost()` */
  static readonly UserLoginPostPath = '/user/login';

  /**
   * User login and token generation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userLoginPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userLoginPost$Response(params: UserLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return userLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * User login and token generation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userLoginPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userLoginPost(params: UserLoginPost$Params, context?: HttpContext): Observable<User> {
    return this.userLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `userResetPasswordPost()` */
  static readonly UserResetPasswordPostPath = '/user/reset-password';

  /**
   * Reset password and send new password to email.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userResetPasswordPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userResetPasswordPost$Response(params: UserResetPasswordPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userResetPasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Reset password and send new password to email.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userResetPasswordPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userResetPasswordPost(params: UserResetPasswordPost$Params, context?: HttpContext): Observable<void> {
    return this.userResetPasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `userStaffUpdateIdPut()` */
  static readonly UserStaffUpdateIdPutPath = '/user/staff-update/{id}';

  /**
   * Staff update a user's information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userStaffUpdateIdPut()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  userStaffUpdateIdPut$Response(params: UserStaffUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userStaffUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Staff update a user's information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userStaffUpdateIdPut$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  userStaffUpdateIdPut(params: UserStaffUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.userStaffUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `userUpdateProfileIdPut()` */
  static readonly UserUpdateProfileIdPutPath = '/user/update-profile/{id}';

  /**
   * Staff update a user's information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userUpdateProfileIdPut()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  userUpdateProfileIdPut$Response(params: UserUpdateProfileIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userUpdateProfileIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Staff update a user's information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userUpdateProfileIdPut$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  userUpdateProfileIdPut(params: UserUpdateProfileIdPut$Params, context?: HttpContext): Observable<void> {
    return this.userUpdateProfileIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `userChangePasswordPut()` */
  static readonly UserChangePasswordPutPath = '/user/change-password';

  /**
   * Change currently logged in user's password (requires old password confirmation).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userChangePasswordPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userChangePasswordPut$Response(params: UserChangePasswordPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userChangePasswordPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Change currently logged in user's password (requires old password confirmation).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userChangePasswordPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userChangePasswordPut(params: UserChangePasswordPut$Params, context?: HttpContext): Observable<void> {
    return this.userChangePasswordPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
