/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Business } from '../models/business';
import { businessesCreatePost } from '../fn/businesses/businesses-create-post';
import { BusinessesCreatePost$Params } from '../fn/businesses/businesses-create-post';
import { businessesDeleteIdDelete } from '../fn/businesses/businesses-delete-id-delete';
import { BusinessesDeleteIdDelete$Params } from '../fn/businesses/businesses-delete-id-delete';
import { businessesGetAllGet } from '../fn/businesses/businesses-get-all-get';
import { BusinessesGetAllGet$Params } from '../fn/businesses/businesses-get-all-get';
import { businessesGetByIdIdGet } from '../fn/businesses/businesses-get-by-id-id-get';
import { BusinessesGetByIdIdGet$Params } from '../fn/businesses/businesses-get-by-id-id-get';
import { businessesGetByLeadIdIdLeadGet } from '../fn/businesses/businesses-get-by-lead-id-id-lead-get';
import { BusinessesGetByLeadIdIdLeadGet$Params } from '../fn/businesses/businesses-get-by-lead-id-id-lead-get';
import { businessesNextActionBusinessIdGet } from '../fn/businesses/businesses-next-action-business-id-get';
import { BusinessesNextActionBusinessIdGet$Params } from '../fn/businesses/businesses-next-action-business-id-get';
import { businessesOverdueActionsBusinessIdGet } from '../fn/businesses/businesses-overdue-actions-business-id-get';
import { BusinessesOverdueActionsBusinessIdGet$Params } from '../fn/businesses/businesses-overdue-actions-business-id-get';
import { businessesUpdateIdPut } from '../fn/businesses/businesses-update-id-put';
import { BusinessesUpdateIdPut$Params } from '../fn/businesses/businesses-update-id-put';

@Injectable({ providedIn: 'root' })
export class BusinessesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `businessesCreatePost()` */
  static readonly BusinessesCreatePostPath = '/businesses/create';

  /**
   * Create a new business opportunity.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessesCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessesCreatePost$Response(params: BusinessesCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Business>> {
    return businessesCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new business opportunity.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessesCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessesCreatePost(params: BusinessesCreatePost$Params, context?: HttpContext): Observable<Business> {
    return this.businessesCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Business>): Business => r.body)
    );
  }

  /** Path part for operation `businessesGetAllGet()` */
  static readonly BusinessesGetAllGetPath = '/businesses/get-all';

  /**
   * Get all businesses created by the logged-in user (paginated).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessesGetAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesGetAllGet$Response(params?: BusinessesGetAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Business>;
}>> {
    return businessesGetAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all businesses created by the logged-in user (paginated).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessesGetAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesGetAllGet(params?: BusinessesGetAllGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Business>;
}> {
    return this.businessesGetAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Business>;
}>): {
'count'?: number;
'rows'?: Array<Business>;
} => r.body)
    );
  }

  /** Path part for operation `businessesGetByIdIdGet()` */
  static readonly BusinessesGetByIdIdGetPath = '/businesses/get-by-id/{id}';

  /**
   * Get a business by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessesGetByIdIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesGetByIdIdGet$Response(params: BusinessesGetByIdIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessesGetByIdIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a business by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessesGetByIdIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesGetByIdIdGet(params: BusinessesGetByIdIdGet$Params, context?: HttpContext): Observable<void> {
    return this.businessesGetByIdIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessesGetByLeadIdIdLeadGet()` */
  static readonly BusinessesGetByLeadIdIdLeadGetPath = '/businesses/get-by-lead-id/{idLead}';

  /**
   * Get a business by lead id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessesGetByLeadIdIdLeadGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesGetByLeadIdIdLeadGet$Response(params: BusinessesGetByLeadIdIdLeadGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Business>;
}>> {
    return businessesGetByLeadIdIdLeadGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a business by lead id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessesGetByLeadIdIdLeadGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesGetByLeadIdIdLeadGet(params: BusinessesGetByLeadIdIdLeadGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Business>;
}> {
    return this.businessesGetByLeadIdIdLeadGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Business>;
}>): {
'count'?: number;
'rows'?: Array<Business>;
} => r.body)
    );
  }

  /** Path part for operation `businessesUpdateIdPut()` */
  static readonly BusinessesUpdateIdPutPath = '/businesses/update/{id}';

  /**
   * Update a business.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessesUpdateIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessesUpdateIdPut$Response(params: BusinessesUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessesUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a business.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessesUpdateIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessesUpdateIdPut(params: BusinessesUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.businessesUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessesDeleteIdDelete()` */
  static readonly BusinessesDeleteIdDeletePath = '/businesses/delete/{id}';

  /**
   * Archive a business.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessesDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesDeleteIdDelete$Response(params: BusinessesDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessesDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive a business.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessesDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesDeleteIdDelete(params: BusinessesDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.businessesDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessesNextActionBusinessIdGet()` */
  static readonly BusinessesNextActionBusinessIdGetPath = '/businesses/next-action/{businessId}';

  /**
   * Get next scheduled action (activity/meeting) for a business.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessesNextActionBusinessIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesNextActionBusinessIdGet$Response(params: BusinessesNextActionBusinessIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessesNextActionBusinessIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get next scheduled action (activity/meeting) for a business.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessesNextActionBusinessIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesNextActionBusinessIdGet(params: BusinessesNextActionBusinessIdGet$Params, context?: HttpContext): Observable<void> {
    return this.businessesNextActionBusinessIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessesOverdueActionsBusinessIdGet()` */
  static readonly BusinessesOverdueActionsBusinessIdGetPath = '/businesses/overdue-actions/{businessId}';

  /**
   * Get overdue actions (activity/meeting) for a business.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessesOverdueActionsBusinessIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesOverdueActionsBusinessIdGet$Response(params: BusinessesOverdueActionsBusinessIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessesOverdueActionsBusinessIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get overdue actions (activity/meeting) for a business.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessesOverdueActionsBusinessIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessesOverdueActionsBusinessIdGet(params: BusinessesOverdueActionsBusinessIdGet$Params, context?: HttpContext): Observable<void> {
    return this.businessesOverdueActionsBusinessIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
