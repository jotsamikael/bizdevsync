/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { businessHasCompetitorsBusinessesIdGet } from '../fn/competitor-has-business/business-has-competitors-businesses-id-get';
import { BusinessHasCompetitorsBusinessesIdGet$Params } from '../fn/competitor-has-business/business-has-competitors-businesses-id-get';
import { businessHasCompetitorsCompetitorBusinessCreatePost } from '../fn/competitor-has-business/business-has-competitors-competitor-business-create-post';
import { BusinessHasCompetitorsCompetitorBusinessCreatePost$Params } from '../fn/competitor-has-business/business-has-competitors-competitor-business-create-post';
import { businessHasCompetitorsLinkBusinessBusinessIdIdPut } from '../fn/competitor-has-business/business-has-competitors-link-business-business-id-id-put';
import { BusinessHasCompetitorsLinkBusinessBusinessIdIdPut$Params } from '../fn/competitor-has-business/business-has-competitors-link-business-business-id-id-put';
import { businessHasCompetitorsUnlinkBusinessBusinessIdIdDelete } from '../fn/competitor-has-business/business-has-competitors-unlink-business-business-id-id-delete';
import { BusinessHasCompetitorsUnlinkBusinessBusinessIdIdDelete$Params } from '../fn/competitor-has-business/business-has-competitors-unlink-business-business-id-id-delete';

@Injectable({ providedIn: 'root' })
export class CompetitorHasBusinessService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `businessHasCompetitorsCompetitorBusinessCreatePost()` */
  static readonly BusinessHasCompetitorsCompetitorBusinessCreatePostPath = '/business-has-competitors/competitor-business/create';

  /**
   * Link a competitor to a business with additional insights.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessHasCompetitorsCompetitorBusinessCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessHasCompetitorsCompetitorBusinessCreatePost$Response(params: BusinessHasCompetitorsCompetitorBusinessCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessHasCompetitorsCompetitorBusinessCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Link a competitor to a business with additional insights.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessHasCompetitorsCompetitorBusinessCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessHasCompetitorsCompetitorBusinessCreatePost(params: BusinessHasCompetitorsCompetitorBusinessCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.businessHasCompetitorsCompetitorBusinessCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessHasCompetitorsLinkBusinessBusinessIdIdPut()` */
  static readonly BusinessHasCompetitorsLinkBusinessBusinessIdIdPutPath = '/business-has-competitors/link-business/{businessId}/{id}';

  /**
   * Update the link between a competitor and a business.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessHasCompetitorsLinkBusinessBusinessIdIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessHasCompetitorsLinkBusinessBusinessIdIdPut$Response(params: BusinessHasCompetitorsLinkBusinessBusinessIdIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessHasCompetitorsLinkBusinessBusinessIdIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update the link between a competitor and a business.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessHasCompetitorsLinkBusinessBusinessIdIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessHasCompetitorsLinkBusinessBusinessIdIdPut(params: BusinessHasCompetitorsLinkBusinessBusinessIdIdPut$Params, context?: HttpContext): Observable<void> {
    return this.businessHasCompetitorsLinkBusinessBusinessIdIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessHasCompetitorsUnlinkBusinessBusinessIdIdDelete()` */
  static readonly BusinessHasCompetitorsUnlinkBusinessBusinessIdIdDeletePath = '/business-has-competitors/unlink-business/{businessId}/{id}';

  /**
   * Unlink a competitor from a business (soft delete).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessHasCompetitorsUnlinkBusinessBusinessIdIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessHasCompetitorsUnlinkBusinessBusinessIdIdDelete$Response(params: BusinessHasCompetitorsUnlinkBusinessBusinessIdIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessHasCompetitorsUnlinkBusinessBusinessIdIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Unlink a competitor from a business (soft delete).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessHasCompetitorsUnlinkBusinessBusinessIdIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessHasCompetitorsUnlinkBusinessBusinessIdIdDelete(params: BusinessHasCompetitorsUnlinkBusinessBusinessIdIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.businessHasCompetitorsUnlinkBusinessBusinessIdIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessHasCompetitorsBusinessesIdGet()` */
  static readonly BusinessHasCompetitorsBusinessesIdGetPath = '/business-has-competitors/businesses/{id}';

  /**
   * Get all businesses linked to a competitor.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessHasCompetitorsBusinessesIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessHasCompetitorsBusinessesIdGet$Response(params: BusinessHasCompetitorsBusinessesIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessHasCompetitorsBusinessesIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all businesses linked to a competitor.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessHasCompetitorsBusinessesIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessHasCompetitorsBusinessesIdGet(params: BusinessHasCompetitorsBusinessesIdGet$Params, context?: HttpContext): Observable<void> {
    return this.businessHasCompetitorsBusinessesIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
