/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Contact } from '../models/contact';
import { contactHasMeetingContactsIdGet } from '../fn/contact-has-meeting/contact-has-meeting-contacts-id-get';
import { ContactHasMeetingContactsIdGet$Params } from '../fn/contact-has-meeting/contact-has-meeting-contacts-id-get';
import { contactHasMeetingLinkMeetingIdPost } from '../fn/contact-has-meeting/contact-has-meeting-link-meeting-id-post';
import { ContactHasMeetingLinkMeetingIdPost$Params } from '../fn/contact-has-meeting/contact-has-meeting-link-meeting-id-post';
import { contactHasMeetingMeetingsIdGet } from '../fn/contact-has-meeting/contact-has-meeting-meetings-id-get';
import { ContactHasMeetingMeetingsIdGet$Params } from '../fn/contact-has-meeting/contact-has-meeting-meetings-id-get';
import { contactHasMeetingUnlinkMeetingMeetingIdIdDelete } from '../fn/contact-has-meeting/contact-has-meeting-unlink-meeting-meeting-id-id-delete';
import { ContactHasMeetingUnlinkMeetingMeetingIdIdDelete$Params } from '../fn/contact-has-meeting/contact-has-meeting-unlink-meeting-meeting-id-id-delete';
import { contactsGetByMeetingMeetingIdGet } from '../fn/contact-has-meeting/contacts-get-by-meeting-meeting-id-get';
import { ContactsGetByMeetingMeetingIdGet$Params } from '../fn/contact-has-meeting/contacts-get-by-meeting-meeting-id-get';

@Injectable({ providedIn: 'root' })
export class ContactHasMeetingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `contactsGetByMeetingMeetingIdGet()` */
  static readonly ContactsGetByMeetingMeetingIdGetPath = '/contacts/get-by-meeting/{meetingId}';

  /**
   * Get paginated contacts linked to a meeting.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsGetByMeetingMeetingIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsGetByMeetingMeetingIdGet$Response(params: ContactsGetByMeetingMeetingIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Contact>;
}>> {
    return contactsGetByMeetingMeetingIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get paginated contacts linked to a meeting.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsGetByMeetingMeetingIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsGetByMeetingMeetingIdGet(params: ContactsGetByMeetingMeetingIdGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Contact>;
}> {
    return this.contactsGetByMeetingMeetingIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Contact>;
}>): {
'count'?: number;
'rows'?: Array<Contact>;
} => r.body)
    );
  }

  /** Path part for operation `contactHasMeetingLinkMeetingIdPost()` */
  static readonly ContactHasMeetingLinkMeetingIdPostPath = '/contact-has-meeting/link-meeting/{id}';

  /**
   * Link a contact to a meeting.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactHasMeetingLinkMeetingIdPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactHasMeetingLinkMeetingIdPost$Response(params: ContactHasMeetingLinkMeetingIdPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return contactHasMeetingLinkMeetingIdPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Link a contact to a meeting.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactHasMeetingLinkMeetingIdPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactHasMeetingLinkMeetingIdPost(params: ContactHasMeetingLinkMeetingIdPost$Params, context?: HttpContext): Observable<void> {
    return this.contactHasMeetingLinkMeetingIdPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `contactHasMeetingUnlinkMeetingMeetingIdIdDelete()` */
  static readonly ContactHasMeetingUnlinkMeetingMeetingIdIdDeletePath = '/contact-has-meeting/unlink-meeting/{meetingId}/{id}';

  /**
   * Unlink a contact from a meeting.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactHasMeetingUnlinkMeetingMeetingIdIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactHasMeetingUnlinkMeetingMeetingIdIdDelete$Response(params: ContactHasMeetingUnlinkMeetingMeetingIdIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return contactHasMeetingUnlinkMeetingMeetingIdIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Unlink a contact from a meeting.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactHasMeetingUnlinkMeetingMeetingIdIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactHasMeetingUnlinkMeetingMeetingIdIdDelete(params: ContactHasMeetingUnlinkMeetingMeetingIdIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.contactHasMeetingUnlinkMeetingMeetingIdIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `contactHasMeetingMeetingsIdGet()` */
  static readonly ContactHasMeetingMeetingsIdGetPath = '/contact-has-meeting/meetings/{id}';

  /**
   * Get all meetings linked to a contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactHasMeetingMeetingsIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactHasMeetingMeetingsIdGet$Response(params: ContactHasMeetingMeetingsIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return contactHasMeetingMeetingsIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all meetings linked to a contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactHasMeetingMeetingsIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactHasMeetingMeetingsIdGet(params: ContactHasMeetingMeetingsIdGet$Params, context?: HttpContext): Observable<void> {
    return this.contactHasMeetingMeetingsIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `contactHasMeetingContactsIdGet()` */
  static readonly ContactHasMeetingContactsIdGetPath = '/contact-has-meeting/contacts/{id}';

  /**
   * Get all contacts linked to a contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactHasMeetingContactsIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactHasMeetingContactsIdGet$Response(params: ContactHasMeetingContactsIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return contactHasMeetingContactsIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all contacts linked to a contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactHasMeetingContactsIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactHasMeetingContactsIdGet(params: ContactHasMeetingContactsIdGet$Params, context?: HttpContext): Observable<void> {
    return this.contactHasMeetingContactsIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
