/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Contact } from '../models/contact';
import { contactsCreatePost } from '../fn/contacts/contacts-create-post';
import { ContactsCreatePost$Params } from '../fn/contacts/contacts-create-post';
import { contactsDeleteIdDelete } from '../fn/contacts/contacts-delete-id-delete';
import { ContactsDeleteIdDelete$Params } from '../fn/contacts/contacts-delete-id-delete';
import { contactsGetAllGet } from '../fn/contacts/contacts-get-all-get';
import { ContactsGetAllGet$Params } from '../fn/contacts/contacts-get-all-get';
import { contactsGetByIdIdGet } from '../fn/contacts/contacts-get-by-id-id-get';
import { ContactsGetByIdIdGet$Params } from '../fn/contacts/contacts-get-by-id-id-get';
import { contactsGetContactsByLeadLeadIdGet } from '../fn/contacts/contacts-get-contacts-by-lead-lead-id-get';
import { ContactsGetContactsByLeadLeadIdGet$Params } from '../fn/contacts/contacts-get-contacts-by-lead-lead-id-get';
import { contactsUpdateIdPut } from '../fn/contacts/contacts-update-id-put';
import { ContactsUpdateIdPut$Params } from '../fn/contacts/contacts-update-id-put';

@Injectable({ providedIn: 'root' })
export class ContactsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `contactsCreatePost()` */
  static readonly ContactsCreatePostPath = '/contacts/create';

  /**
   * Create a new contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactsCreatePost$Response(params: ContactsCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Contact>> {
    return contactsCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactsCreatePost(params: ContactsCreatePost$Params, context?: HttpContext): Observable<Contact> {
    return this.contactsCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Contact>): Contact => r.body)
    );
  }

  /** Path part for operation `contactsGetAllGet()` */
  static readonly ContactsGetAllGetPath = '/contacts/get-all';

  /**
   * Get all contacts (paginated).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsGetAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsGetAllGet$Response(params?: ContactsGetAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Contact>;
}>> {
    return contactsGetAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all contacts (paginated).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsGetAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsGetAllGet(params?: ContactsGetAllGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Contact>;
}> {
    return this.contactsGetAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Contact>;
}>): {
'count'?: number;
'rows'?: Array<Contact>;
} => r.body)
    );
  }

  /** Path part for operation `contactsGetContactsByLeadLeadIdGet()` */
  static readonly ContactsGetContactsByLeadLeadIdGetPath = '/contacts/get-contacts-by-lead/{leadId}';

  /**
   * Get all contacts for a specific lead.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsGetContactsByLeadLeadIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsGetContactsByLeadLeadIdGet$Response(params: ContactsGetContactsByLeadLeadIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<{
}>;
}>> {
    return contactsGetContactsByLeadLeadIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all contacts for a specific lead.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsGetContactsByLeadLeadIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsGetContactsByLeadLeadIdGet(params: ContactsGetContactsByLeadLeadIdGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<{
}>;
}> {
    return this.contactsGetContactsByLeadLeadIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<{
}>;
}>): {
'count'?: number;
'rows'?: Array<{
}>;
} => r.body)
    );
  }

  /** Path part for operation `contactsGetByIdIdGet()` */
  static readonly ContactsGetByIdIdGetPath = '/contacts/get-by-id/{id}';

  /**
   * Get contact by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsGetByIdIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsGetByIdIdGet$Response(params: ContactsGetByIdIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return contactsGetByIdIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get contact by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsGetByIdIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsGetByIdIdGet(params: ContactsGetByIdIdGet$Params, context?: HttpContext): Observable<void> {
    return this.contactsGetByIdIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `contactsUpdateIdPut()` */
  static readonly ContactsUpdateIdPutPath = '/contacts/update/{id}';

  /**
   * Update a contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsUpdateIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactsUpdateIdPut$Response(params: ContactsUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return contactsUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsUpdateIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactsUpdateIdPut(params: ContactsUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.contactsUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `contactsDeleteIdDelete()` */
  static readonly ContactsDeleteIdDeletePath = '/contacts/delete/{id}';

  /**
   * Archive a contact (soft delete).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsDeleteIdDelete$Response(params: ContactsDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return contactsDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive a contact (soft delete).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsDeleteIdDelete(params: ContactsDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.contactsDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
