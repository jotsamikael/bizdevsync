/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { countriesCreatePost } from '../fn/countries/countries-create-post';
import { CountriesCreatePost$Params } from '../fn/countries/countries-create-post';
import { countriesDeleteIdDelete } from '../fn/countries/countries-delete-id-delete';
import { CountriesDeleteIdDelete$Params } from '../fn/countries/countries-delete-id-delete';
import { countriesGetAllGet } from '../fn/countries/countries-get-all-get';
import { CountriesGetAllGet$Params } from '../fn/countries/countries-get-all-get';
import { countriesGetByIdIdGet } from '../fn/countries/countries-get-by-id-id-get';
import { CountriesGetByIdIdGet$Params } from '../fn/countries/countries-get-by-id-id-get';
import { countriesUpdateIdPatch } from '../fn/countries/countries-update-id-patch';
import { CountriesUpdateIdPatch$Params } from '../fn/countries/countries-update-id-patch';
import { Country } from '../models/country';

@Injectable({ providedIn: 'root' })
export class CountriesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `countriesCreatePost()` */
  static readonly CountriesCreatePostPath = '/countries/create';

  /**
   * Create a new country.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countriesCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  countriesCreatePost$Response(params: CountriesCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return countriesCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new country.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countriesCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  countriesCreatePost(params: CountriesCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.countriesCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `countriesGetAllGet()` */
  static readonly CountriesGetAllGetPath = '/countries/get-all';

  /**
   * Get all countries (paginated).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countriesGetAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  countriesGetAllGet$Response(params?: CountriesGetAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
    'count'?: number;
    'rows'?: Array<Country>;
  }>> {
    return countriesGetAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all countries (paginated).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countriesGetAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countriesGetAllGet(params?: CountriesGetAllGet$Params, context?: HttpContext): Observable<{
    'count'?: number;
    'rows'?: Array<Country>;
  }> {
    return this.countriesGetAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
        'count'?: number;
        'rows'?: Array<Country>;
      }>): {
        'count'?: number;
        'rows'?: Array<Country>;
      } => r.body)
    );
  }



  
  /** Path part for operation `countriesGetByIdIdGet()` */
  static readonly CountriesGetByIdIdGetPath = '/countries/get-by-id/{id}';

  /**
   * Get a country by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countriesGetByIdIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  countriesGetByIdIdGet$Response(params: CountriesGetByIdIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Country>> {
    return countriesGetByIdIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a country by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countriesGetByIdIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countriesGetByIdIdGet(params: CountriesGetByIdIdGet$Params, context?: HttpContext): Observable<Country> {
    return this.countriesGetByIdIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Country>): Country => r.body)
    );
  }

  /** Path part for operation `countriesUpdateIdPatch()` */
  static readonly CountriesUpdateIdPatchPath = '/countries/update/{id}';

  /**
   * Update a country.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countriesUpdateIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  countriesUpdateIdPatch$Response(params: CountriesUpdateIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return countriesUpdateIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a country.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countriesUpdateIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  countriesUpdateIdPatch(params: CountriesUpdateIdPatch$Params, context?: HttpContext): Observable<void> {
    return this.countriesUpdateIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `countriesDeleteIdDelete()` */
  static readonly CountriesDeleteIdDeletePath = '/countries/delete/{id}';

  /**
   * Archive a country (soft delete).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countriesDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  countriesDeleteIdDelete$Response(params: CountriesDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return countriesDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive a country (soft delete).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countriesDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countriesDeleteIdDelete(params: CountriesDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.countriesDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
