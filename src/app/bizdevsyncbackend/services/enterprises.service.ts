/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Enterprise } from '../models/enterprise';
import { enterprisesCreatePost } from '../fn/enterprises/enterprises-create-post';
import { EnterprisesCreatePost$Params } from '../fn/enterprises/enterprises-create-post';
import { enterprisesDeleteIdDelete } from '../fn/enterprises/enterprises-delete-id-delete';
import { EnterprisesDeleteIdDelete$Params } from '../fn/enterprises/enterprises-delete-id-delete';
import { enterprisesGetAllGet } from '../fn/enterprises/enterprises-get-all-get';
import { EnterprisesGetAllGet$Params } from '../fn/enterprises/enterprises-get-all-get';
import { enterprisesGetByIdIdGet } from '../fn/enterprises/enterprises-get-by-id-id-get';
import { EnterprisesGetByIdIdGet$Params } from '../fn/enterprises/enterprises-get-by-id-id-get';
import { enterprisesUpdateIdPatch } from '../fn/enterprises/enterprises-update-id-patch';
import { EnterprisesUpdateIdPatch$Params } from '../fn/enterprises/enterprises-update-id-patch';

@Injectable({ providedIn: 'root' })
export class EnterprisesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `enterprisesCreatePost()` */
  static readonly EnterprisesCreatePostPath = '/enterprises/create';

  /**
   * Create a new enterprise.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `enterprisesCreatePost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  enterprisesCreatePost$Response(params: EnterprisesCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return enterprisesCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new enterprise.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `enterprisesCreatePost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  enterprisesCreatePost(params: EnterprisesCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.enterprisesCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `enterprisesGetAllGet()` */
  static readonly EnterprisesGetAllGetPath = '/enterprises/get-all';

  /**
   * Get all enterprises (paginated).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `enterprisesGetAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  enterprisesGetAllGet$Response(params?: EnterprisesGetAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Enterprise>> {
    return enterprisesGetAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all enterprises (paginated).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `enterprisesGetAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  enterprisesGetAllGet(params?: EnterprisesGetAllGet$Params, context?: HttpContext): Observable<Enterprise> {
    return this.enterprisesGetAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Enterprise>): Enterprise => r.body)
    );
  }

  /** Path part for operation `enterprisesGetByIdIdGet()` */
  static readonly EnterprisesGetByIdIdGetPath = '/enterprises/get-by-id/{id}';

  /**
   * Get an enterprise by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `enterprisesGetByIdIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  enterprisesGetByIdIdGet$Response(params: EnterprisesGetByIdIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Enterprise>;
}>> {
    return enterprisesGetByIdIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get an enterprise by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `enterprisesGetByIdIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  enterprisesGetByIdIdGet(params: EnterprisesGetByIdIdGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Enterprise>;
}> {
    return this.enterprisesGetByIdIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Enterprise>;
}>): {
'count'?: number;
'rows'?: Array<Enterprise>;
} => r.body)
    );
  }

  /** Path part for operation `enterprisesUpdateIdPatch()` */
  static readonly EnterprisesUpdateIdPatchPath = '/enterprises/update/{id}';

  /**
   * Update an existing enterprise.
   *
   * Partially updates an enterprise's information
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `enterprisesUpdateIdPatch()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  enterprisesUpdateIdPatch$Response(params: EnterprisesUpdateIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'message'?: string;
'data'?: {
};
}>> {
    return enterprisesUpdateIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing enterprise.
   *
   * Partially updates an enterprise's information
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `enterprisesUpdateIdPatch$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  enterprisesUpdateIdPatch(params: EnterprisesUpdateIdPatch$Params, context?: HttpContext): Observable<{
'message'?: string;
'data'?: {
};
}> {
    return this.enterprisesUpdateIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'message'?: string;
'data'?: {
};
}>): {
'message'?: string;
'data'?: {
};
} => r.body)
    );
  }

  /** Path part for operation `enterprisesDeleteIdDelete()` */
  static readonly EnterprisesDeleteIdDeletePath = '/enterprises/delete/{id}';

  /**
   * Archive an enterprise (soft delete).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `enterprisesDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  enterprisesDeleteIdDelete$Response(params: EnterprisesDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return enterprisesDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive an enterprise (soft delete).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `enterprisesDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  enterprisesDeleteIdDelete(params: EnterprisesDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.enterprisesDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
