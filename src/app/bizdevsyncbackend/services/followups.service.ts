/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Followup } from '../models/followup';
import { followupsCreatePost } from '../fn/followups/followups-create-post';
import { FollowupsCreatePost$Params } from '../fn/followups/followups-create-post';
import { followupsDeleteIdDelete } from '../fn/followups/followups-delete-id-delete';
import { FollowupsDeleteIdDelete$Params } from '../fn/followups/followups-delete-id-delete';
import { followupsGetAllGet } from '../fn/followups/followups-get-all-get';
import { FollowupsGetAllGet$Params } from '../fn/followups/followups-get-all-get';
import { followupsGetByIdIdGet } from '../fn/followups/followups-get-by-id-id-get';
import { FollowupsGetByIdIdGet$Params } from '../fn/followups/followups-get-by-id-id-get';
import { followupsNextActionFollowupIdGet } from '../fn/followups/followups-next-action-followup-id-get';
import { FollowupsNextActionFollowupIdGet$Params } from '../fn/followups/followups-next-action-followup-id-get';
import { followupsOverdueActionsFollowupIdGet } from '../fn/followups/followups-overdue-actions-followup-id-get';
import { FollowupsOverdueActionsFollowupIdGet$Params } from '../fn/followups/followups-overdue-actions-followup-id-get';
import { followupsUpdateIdPut } from '../fn/followups/followups-update-id-put';
import { FollowupsUpdateIdPut$Params } from '../fn/followups/followups-update-id-put';
import { followupsUpdateScorePut } from '../fn/followups/followups-update-score-put';
import { FollowupsUpdateScorePut$Params } from '../fn/followups/followups-update-score-put';
import { Meeting } from '../models/meeting';

@Injectable({ providedIn: 'root' })
export class FollowupsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `followupsCreatePost()` */
  static readonly FollowupsCreatePostPath = '/followups/create';

  /**
   * Create a new followup.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `followupsCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  followupsCreatePost$Response(params: FollowupsCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return followupsCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new followup.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `followupsCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  followupsCreatePost(params: FollowupsCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.followupsCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `followupsGetAllGet()` */
  static readonly FollowupsGetAllGetPath = '/followups/get-all';

  /**
   * Get all followups (paginated) of logged in user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `followupsGetAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsGetAllGet$Response(params?: FollowupsGetAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return followupsGetAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all followups (paginated) of logged in user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `followupsGetAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsGetAllGet(params?: FollowupsGetAllGet$Params, context?: HttpContext): Observable<void> {
    return this.followupsGetAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `followupsGetByIdIdGet()` */
  static readonly FollowupsGetByIdIdGetPath = '/followups/get-by-id/{id}';

  /**
   * Get a followup by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `followupsGetByIdIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsGetByIdIdGet$Response(params: FollowupsGetByIdIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return followupsGetByIdIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a followup by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `followupsGetByIdIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsGetByIdIdGet(params: FollowupsGetByIdIdGet$Params, context?: HttpContext): Observable<void> {
    return this.followupsGetByIdIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `followupsUpdateIdPut()` */
  static readonly FollowupsUpdateIdPutPath = '/followups/update/{id}';

  /**
   * Update a followup.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `followupsUpdateIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  followupsUpdateIdPut$Response(params: FollowupsUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return followupsUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a followup.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `followupsUpdateIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  followupsUpdateIdPut(params: FollowupsUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.followupsUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `followupsDeleteIdDelete()` */
  static readonly FollowupsDeleteIdDeletePath = '/followups/delete/{id}';

  /**
   * Archive a followup.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `followupsDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsDeleteIdDelete$Response(params: FollowupsDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Followup>> {
    return followupsDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive a followup.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `followupsDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsDeleteIdDelete(params: FollowupsDeleteIdDelete$Params, context?: HttpContext): Observable<Followup> {
    return this.followupsDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<Followup>): Followup => r.body)
    );
  }

  /** Path part for operation `followupsNextActionFollowupIdGet()` */
  static readonly FollowupsNextActionFollowupIdGetPath = '/followups/next-action/{followupId}';

  /**
   * Get next scheduled action (activity/meeting) for a followup.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `followupsNextActionFollowupIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsNextActionFollowupIdGet$Response(params: FollowupsNextActionFollowupIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Meeting>;
}>> {
    return followupsNextActionFollowupIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get next scheduled action (activity/meeting) for a followup.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `followupsNextActionFollowupIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsNextActionFollowupIdGet(params: FollowupsNextActionFollowupIdGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Meeting>;
}> {
    return this.followupsNextActionFollowupIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Meeting>;
}>): {
'count'?: number;
'rows'?: Array<Meeting>;
} => r.body)
    );
  }

  /** Path part for operation `followupsOverdueActionsFollowupIdGet()` */
  static readonly FollowupsOverdueActionsFollowupIdGetPath = '/followups/overdue-actions/{followupId}';

  /**
   * Get overdue actions (activity/meeting) for a followup.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `followupsOverdueActionsFollowupIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsOverdueActionsFollowupIdGet$Response(params: FollowupsOverdueActionsFollowupIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return followupsOverdueActionsFollowupIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get overdue actions (activity/meeting) for a followup.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `followupsOverdueActionsFollowupIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsOverdueActionsFollowupIdGet(params: FollowupsOverdueActionsFollowupIdGet$Params, context?: HttpContext): Observable<void> {
    return this.followupsOverdueActionsFollowupIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `followupsUpdateScorePut()` */
  static readonly FollowupsUpdateScorePutPath = '/followups/update-score';

  /**
   * Update followup scores.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `followupsUpdateScorePut()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsUpdateScorePut$Response(params?: FollowupsUpdateScorePut$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'message'?: string;
'results'?: Array<{
}>;
}>> {
    return followupsUpdateScorePut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update followup scores.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `followupsUpdateScorePut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  followupsUpdateScorePut(params?: FollowupsUpdateScorePut$Params, context?: HttpContext): Observable<{
'message'?: string;
'results'?: Array<{
}>;
}> {
    return this.followupsUpdateScorePut$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'message'?: string;
'results'?: Array<{
}>;
}>): {
'message'?: string;
'results'?: Array<{
}>;
} => r.body)
    );
  }

}
