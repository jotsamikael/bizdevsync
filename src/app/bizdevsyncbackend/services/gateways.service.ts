/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { gatewaysGet } from '../fn/gateways/gateways-get';
import { GatewaysGet$Params } from '../fn/gateways/gateways-get';

@Injectable({ providedIn: 'root' })
export class GatewaysService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `gatewaysGet()` */
  static readonly GatewaysGetPath = '/gateways';

  /**
   * Get all payment gateways (admin only).
   *
   * Retrieve all configured payment gateways regardless of their status.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `gatewaysGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  gatewaysGet$Response(params?: GatewaysGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<{
'id'?: number;
'name'?: string;
'currency'?: string;

/**
 * 1 = active, 0 = inactive
 */
'status'?: number;
}>>> {
    return gatewaysGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all payment gateways (admin only).
   *
   * Retrieve all configured payment gateways regardless of their status.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `gatewaysGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  gatewaysGet(params?: GatewaysGet$Params, context?: HttpContext): Observable<Array<{
'id'?: number;
'name'?: string;
'currency'?: string;

/**
 * 1 = active, 0 = inactive
 */
'status'?: number;
}>> {
    return this.gatewaysGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<{
'id'?: number;
'name'?: string;
'currency'?: string;

/**
 * 1 = active, 0 = inactive
 */
'status'?: number;
}>>): Array<{
'id'?: number;
'name'?: string;
'currency'?: string;

/**
 * 1 = active, 0 = inactive
 */
'status'?: number;
}> => r.body)
    );
  }

}
