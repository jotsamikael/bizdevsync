/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Lead } from '../models/lead';
import { leadsAssignedToMeGet } from '../fn/leads/leads-assigned-to-me-get';
import { LeadsAssignedToMeGet$Params } from '../fn/leads/leads-assigned-to-me-get';
import { leadsCreatedByMeGet } from '../fn/leads/leads-created-by-me-get';
import { LeadsCreatedByMeGet$Params } from '../fn/leads/leads-created-by-me-get';
import { leadsCreatePost } from '../fn/leads/leads-create-post';
import { LeadsCreatePost$Params } from '../fn/leads/leads-create-post';
import { leadsDeleteIdDelete } from '../fn/leads/leads-delete-id-delete';
import { LeadsDeleteIdDelete$Params } from '../fn/leads/leads-delete-id-delete';
import { leadsUpdateIdPut } from '../fn/leads/leads-update-id-put';
import { LeadsUpdateIdPut$Params } from '../fn/leads/leads-update-id-put';

@Injectable({ providedIn: 'root' })
export class LeadsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `leadsCreatePost()` */
  static readonly LeadsCreatePostPath = '/leads/create';

  /**
   * Create a new lead.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `leadsCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  leadsCreatePost$Response(params: LeadsCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Lead>> {
    return leadsCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new lead.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `leadsCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  leadsCreatePost(params: LeadsCreatePost$Params, context?: HttpContext): Observable<Lead> {
    return this.leadsCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Lead>): Lead => r.body)
    );
  }

  /** Path part for operation `leadsAssignedToMeGet()` */
  static readonly LeadsAssignedToMeGetPath = '/leads/assigned-to-me';

  /**
   * Get all leads assigned to the logged-in user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `leadsAssignedToMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  leadsAssignedToMeGet$Response(params?: LeadsAssignedToMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Lead>;
}>> {
    return leadsAssignedToMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all leads assigned to the logged-in user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `leadsAssignedToMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  leadsAssignedToMeGet(params?: LeadsAssignedToMeGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Lead>;
}> {
    return this.leadsAssignedToMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Lead>;
}>): {
'count'?: number;
'rows'?: Array<Lead>;
} => r.body)
    );
  }

  /** Path part for operation `leadsCreatedByMeGet()` */
  static readonly LeadsCreatedByMeGetPath = '/leads/created-by-me';

  /**
   * Get all leads created by the logged-in user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `leadsCreatedByMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  leadsCreatedByMeGet$Response(params?: LeadsCreatedByMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Lead>;
}>> {
    return leadsCreatedByMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all leads created by the logged-in user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `leadsCreatedByMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  leadsCreatedByMeGet(params?: LeadsCreatedByMeGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Lead>;
}> {
    return this.leadsCreatedByMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Lead>;
}>): {
'count'?: number;
'rows'?: Array<Lead>;
} => r.body)
    );
  }

  /** Path part for operation `leadsUpdateIdPut()` */
  static readonly LeadsUpdateIdPutPath = '/leads/update/{id}';

  /**
   * Update a lead.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `leadsUpdateIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  leadsUpdateIdPut$Response(params: LeadsUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return leadsUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a lead.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `leadsUpdateIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  leadsUpdateIdPut(params: LeadsUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.leadsUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `leadsDeleteIdDelete()` */
  static readonly LeadsDeleteIdDeletePath = '/leads/delete/{id}';

  /**
   * Archive a lead (soft delete).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `leadsDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  leadsDeleteIdDelete$Response(params: LeadsDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return leadsDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive a lead (soft delete).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `leadsDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  leadsDeleteIdDelete(params: LeadsDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.leadsDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
