/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Meeting } from '../models/meeting';
import { meetingsCreatePost } from '../fn/meetings/meetings-create-post';
import { MeetingsCreatePost$Params } from '../fn/meetings/meetings-create-post';
import { meetingsDeleteIdDelete } from '../fn/meetings/meetings-delete-id-delete';
import { MeetingsDeleteIdDelete$Params } from '../fn/meetings/meetings-delete-id-delete';
import { meetingsGetAllGet } from '../fn/meetings/meetings-get-all-get';
import { MeetingsGetAllGet$Params } from '../fn/meetings/meetings-get-all-get';
import { meetingsGetByBusinessBusinessIdGet } from '../fn/meetings/meetings-get-by-business-business-id-get';
import { MeetingsGetByBusinessBusinessIdGet$Params } from '../fn/meetings/meetings-get-by-business-business-id-get';
import { meetingsGetByFollowupFollowupIdGet } from '../fn/meetings/meetings-get-by-followup-followup-id-get';
import { MeetingsGetByFollowupFollowupIdGet$Params } from '../fn/meetings/meetings-get-by-followup-followup-id-get';
import { meetingsGetByIdIdGet } from '../fn/meetings/meetings-get-by-id-id-get';
import { MeetingsGetByIdIdGet$Params } from '../fn/meetings/meetings-get-by-id-id-get';
import { meetingsUpdateIdPut } from '../fn/meetings/meetings-update-id-put';
import { MeetingsUpdateIdPut$Params } from '../fn/meetings/meetings-update-id-put';

@Injectable({ providedIn: 'root' })
export class MeetingsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `meetingsCreatePost()` */
  static readonly MeetingsCreatePostPath = '/meetings/create';

  /**
   * Create a new meeting.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `meetingsCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  meetingsCreatePost$Response(params: MeetingsCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return meetingsCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new meeting.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `meetingsCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  meetingsCreatePost(params: MeetingsCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.meetingsCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `meetingsGetAllGet()` */
  static readonly MeetingsGetAllGetPath = '/meetings/get-all';

  /**
   * Get all meetings f the logged-in user (paginated).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `meetingsGetAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsGetAllGet$Response(params?: MeetingsGetAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return meetingsGetAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all meetings f the logged-in user (paginated).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `meetingsGetAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsGetAllGet(params?: MeetingsGetAllGet$Params, context?: HttpContext): Observable<void> {
    return this.meetingsGetAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `meetingsGetByIdIdGet()` */
  static readonly MeetingsGetByIdIdGetPath = '/meetings/get-by-id/{id}';

  /**
   * Get a meeting by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `meetingsGetByIdIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsGetByIdIdGet$Response(params: MeetingsGetByIdIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return meetingsGetByIdIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a meeting by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `meetingsGetByIdIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsGetByIdIdGet(params: MeetingsGetByIdIdGet$Params, context?: HttpContext): Observable<void> {
    return this.meetingsGetByIdIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `meetingsUpdateIdPut()` */
  static readonly MeetingsUpdateIdPutPath = '/meetings/update/{id}';

  /**
   * Update a meeting.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `meetingsUpdateIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  meetingsUpdateIdPut$Response(params: MeetingsUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return meetingsUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a meeting.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `meetingsUpdateIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  meetingsUpdateIdPut(params: MeetingsUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.meetingsUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `meetingsGetByFollowupFollowupIdGet()` */
  static readonly MeetingsGetByFollowupFollowupIdGetPath = '/meetings/get-by-followup/{followupId}';

  /**
   * Get paginated meetings for a followup.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `meetingsGetByFollowupFollowupIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsGetByFollowupFollowupIdGet$Response(params: MeetingsGetByFollowupFollowupIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return meetingsGetByFollowupFollowupIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get paginated meetings for a followup.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `meetingsGetByFollowupFollowupIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsGetByFollowupFollowupIdGet(params: MeetingsGetByFollowupFollowupIdGet$Params, context?: HttpContext): Observable<void> {
    return this.meetingsGetByFollowupFollowupIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `meetingsGetByBusinessBusinessIdGet()` */
  static readonly MeetingsGetByBusinessBusinessIdGetPath = '/meetings/get-by-business/{businessId}';

  /**
   * Get paginated meetings for a business.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `meetingsGetByBusinessBusinessIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsGetByBusinessBusinessIdGet$Response(params: MeetingsGetByBusinessBusinessIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Meeting>;
}>> {
    return meetingsGetByBusinessBusinessIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get paginated meetings for a business.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `meetingsGetByBusinessBusinessIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsGetByBusinessBusinessIdGet(params: MeetingsGetByBusinessBusinessIdGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Meeting>;
}> {
    return this.meetingsGetByBusinessBusinessIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Meeting>;
}>): {
'count'?: number;
'rows'?: Array<Meeting>;
} => r.body)
    );
  }

  /** Path part for operation `meetingsDeleteIdDelete()` */
  static readonly MeetingsDeleteIdDeletePath = '/meetings/delete/{id}';

  /**
   * Archive a meeting.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `meetingsDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsDeleteIdDelete$Response(params: MeetingsDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Meeting>> {
    return meetingsDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive a meeting.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `meetingsDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  meetingsDeleteIdDelete(params: MeetingsDeleteIdDelete$Params, context?: HttpContext): Observable<Meeting> {
    return this.meetingsDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<Meeting>): Meeting => r.body)
    );
  }

}
