/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Order } from '../models/order';
import { ordersConfirmPost } from '../fn/orders/orders-confirm-post';
import { OrdersConfirmPost$Params } from '../fn/orders/orders-confirm-post';
import { ordersPost } from '../fn/orders/orders-post';
import { OrdersPost$Params } from '../fn/orders/orders-post';

@Injectable({ providedIn: 'root' })
export class OrdersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `ordersPost()` */
  static readonly OrdersPostPath = '/orders';

  /**
   * Create a subscription order for a plan using a payment gateway.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersPost$Response(params: OrdersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return ordersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a subscription order for a plan using a payment gateway.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersPost(params: OrdersPost$Params, context?: HttpContext): Observable<Order> {
    return this.ordersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /** Path part for operation `ordersConfirmPost()` */
  static readonly OrdersConfirmPostPath = '/orders/confirm';

  /**
   * Confirm an order manually and activate the subscription.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersConfirmPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersConfirmPost$Response(params: OrdersConfirmPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return ordersConfirmPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Confirm an order manually and activate the subscription.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersConfirmPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersConfirmPost(params: OrdersConfirmPost$Params, context?: HttpContext): Observable<void> {
    return this.ordersConfirmPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
