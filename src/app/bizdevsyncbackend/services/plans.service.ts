/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Plan } from '../models/plan';
import { plansGet } from '../fn/plans/plans-get';
import { PlansGet$Params } from '../fn/plans/plans-get';
import { plansIdDelete } from '../fn/plans/plans-id-delete';
import { PlansIdDelete$Params } from '../fn/plans/plans-id-delete';
import { plansIdPut } from '../fn/plans/plans-id-put';
import { PlansIdPut$Params } from '../fn/plans/plans-id-put';
import { plansPost } from '../fn/plans/plans-post';
import { PlansPost$Params } from '../fn/plans/plans-post';

@Injectable({ providedIn: 'root' })
export class PlansService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `plansGet()` */
  static readonly PlansGetPath = '/plans';

  /**
   * Get all active plans.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `plansGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  plansGet$Response(params?: PlansGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return plansGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all active plans.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `plansGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  plansGet(params?: PlansGet$Params, context?: HttpContext): Observable<void> {
    return this.plansGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `plansPost()` */
  static readonly PlansPostPath = '/plans';

  /**
   * Create a new subscription plan.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `plansPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  plansPost$Response(params: PlansPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Plan>> {
    return plansPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new subscription plan.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `plansPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  plansPost(params: PlansPost$Params, context?: HttpContext): Observable<Plan> {
    return this.plansPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Plan>): Plan => r.body)
    );
  }

  /** Path part for operation `plansIdPut()` */
  static readonly PlansIdPutPath = '/plans/{id}';

  /**
   * Update a specific subscription plan.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `plansIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  plansIdPut$Response(params: PlansIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return plansIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a specific subscription plan.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `plansIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  plansIdPut(params: PlansIdPut$Params, context?: HttpContext): Observable<void> {
    return this.plansIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `plansIdDelete()` */
  static readonly PlansIdDeletePath = '/plans/{id}';

  /**
   * Soft delete a specific subscription plan (sets status to 0).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `plansIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  plansIdDelete$Response(params: PlansIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return plansIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Soft delete a specific subscription plan (sets status to 0).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `plansIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  plansIdDelete(params: PlansIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.plansIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
