/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { productCategoriesCreatePost } from '../fn/product-categories/product-categories-create-post';
import { ProductCategoriesCreatePost$Params } from '../fn/product-categories/product-categories-create-post';
import { productCategoriesDeleteIdDelete } from '../fn/product-categories/product-categories-delete-id-delete';
import { ProductCategoriesDeleteIdDelete$Params } from '../fn/product-categories/product-categories-delete-id-delete';
import { productCategoriesGetAllGet } from '../fn/product-categories/product-categories-get-all-get';
import { ProductCategoriesGetAllGet$Params } from '../fn/product-categories/product-categories-get-all-get';
import { productCategoriesUpdateIdPut } from '../fn/product-categories/product-categories-update-id-put';
import { ProductCategoriesUpdateIdPut$Params } from '../fn/product-categories/product-categories-update-id-put';
import { ProductCategory } from '../models/product-category';

@Injectable({ providedIn: 'root' })
export class ProductCategoriesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `productCategoriesCreatePost()` */
  static readonly ProductCategoriesCreatePostPath = '/product-categories/create';

  /**
   * Create a new product category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productCategoriesCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productCategoriesCreatePost$Response(params: ProductCategoriesCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductCategory>> {
    return productCategoriesCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new product category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productCategoriesCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productCategoriesCreatePost(params: ProductCategoriesCreatePost$Params, context?: HttpContext): Observable<ProductCategory> {
    return this.productCategoriesCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductCategory>): ProductCategory => r.body)
    );
  }

  /** Path part for operation `productCategoriesGetAllGet()` */
  static readonly ProductCategoriesGetAllGetPath = '/product-categories/get-all';

  /**
   * Get all product categories for currently loggedin user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productCategoriesGetAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  productCategoriesGetAllGet$Response(params?: ProductCategoriesGetAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<ProductCategory>;
}>> {
    return productCategoriesGetAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all product categories for currently loggedin user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productCategoriesGetAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productCategoriesGetAllGet(params?: ProductCategoriesGetAllGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<ProductCategory>;
}> {
    return this.productCategoriesGetAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<ProductCategory>;
}>): {
'count'?: number;
'rows'?: Array<ProductCategory>;
} => r.body)
    );
  }

  /** Path part for operation `productCategoriesUpdateIdPut()` */
  static readonly ProductCategoriesUpdateIdPutPath = '/product-categories/update/{id}';

  /**
   * Update a product category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productCategoriesUpdateIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productCategoriesUpdateIdPut$Response(params: ProductCategoriesUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productCategoriesUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a product category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productCategoriesUpdateIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productCategoriesUpdateIdPut(params: ProductCategoriesUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.productCategoriesUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productCategoriesDeleteIdDelete()` */
  static readonly ProductCategoriesDeleteIdDeletePath = '/product-categories/delete/{id}';

  /**
   * Archive a product category (soft delete).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productCategoriesDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  productCategoriesDeleteIdDelete$Response(params: ProductCategoriesDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productCategoriesDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive a product category (soft delete).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productCategoriesDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productCategoriesDeleteIdDelete(params: ProductCategoriesDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.productCategoriesDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
