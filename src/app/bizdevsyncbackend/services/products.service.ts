/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Product } from '../models/product';
import { productsCreatePost } from '../fn/products/products-create-post';
import { ProductsCreatePost$Params } from '../fn/products/products-create-post';
import { productsDeleteIdDelete } from '../fn/products/products-delete-id-delete';
import { ProductsDeleteIdDelete$Params } from '../fn/products/products-delete-id-delete';
import { productsGetAllByIdCategoryIdGet } from '../fn/products/products-get-all-by-id-category-id-get';
import { ProductsGetAllByIdCategoryIdGet$Params } from '../fn/products/products-get-all-by-id-category-id-get';
import { productsGetAllGet } from '../fn/products/products-get-all-get';
import { ProductsGetAllGet$Params } from '../fn/products/products-get-all-get';
import { productsUpdateIdPut } from '../fn/products/products-update-id-put';
import { ProductsUpdateIdPut$Params } from '../fn/products/products-update-id-put';

@Injectable({ providedIn: 'root' })
export class ProductsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `productsCreatePost()` */
  static readonly ProductsCreatePostPath = '/products/create';

  /**
   * Create a new product.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsCreatePost$Response(params: ProductsCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productsCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new product.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsCreatePost(params: ProductsCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.productsCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productsGetAllGet()` */
  static readonly ProductsGetAllGetPath = '/products/get-all';

  /**
   * Get all products created by the logged-in user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsGetAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsGetAllGet$Response(params?: ProductsGetAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Product>;
}>> {
    return productsGetAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all products created by the logged-in user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsGetAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsGetAllGet(params?: ProductsGetAllGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Product>;
}> {
    return this.productsGetAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Product>;
}>): {
'count'?: number;
'rows'?: Array<Product>;
} => r.body)
    );
  }

  /** Path part for operation `productsUpdateIdPut()` */
  static readonly ProductsUpdateIdPutPath = '/products/update/{id}';

  /**
   * Update a product.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsUpdateIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsUpdateIdPut$Response(params: ProductsUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productsUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a product.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsUpdateIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsUpdateIdPut(params: ProductsUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.productsUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productsDeleteIdDelete()` */
  static readonly ProductsDeleteIdDeletePath = '/products/delete/{id}';

  /**
   * Archive a product (soft delete).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsDeleteIdDelete$Response(params: ProductsDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Product>> {
    return productsDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Archive a product (soft delete).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsDeleteIdDelete(params: ProductsDeleteIdDelete$Params, context?: HttpContext): Observable<Product> {
    return this.productsDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<Product>): Product => r.body)
    );
  }

  /** Path part for operation `productsGetAllByIdCategoryIdGet()` */
  static readonly ProductsGetAllByIdCategoryIdGetPath = '/products/get-all-by-id/{categoryId}';

  /**
   * Get paginated products for a category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsGetAllByIdCategoryIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsGetAllByIdCategoryIdGet$Response(params: ProductsGetAllByIdCategoryIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Product>;
}>> {
    return productsGetAllByIdCategoryIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get paginated products for a category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsGetAllByIdCategoryIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsGetAllByIdCategoryIdGet(params: ProductsGetAllByIdCategoryIdGet$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<Product>;
}> {
    return this.productsGetAllByIdCategoryIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<Product>;
}>): {
'count'?: number;
'rows'?: Array<Product>;
} => r.body)
    );
  }

}
