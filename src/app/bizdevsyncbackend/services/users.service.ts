/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { User } from '../models/user';
import { userEnterpriseEnterpriseIdPost } from '../fn/users/user-enterprise-enterprise-id-post';
import { UserEnterpriseEnterpriseIdPost$Params } from '../fn/users/user-enterprise-enterprise-id-post';
import { userGetSoloBizdevsPost } from '../fn/users/user-get-solo-bizdevs-post';
import { UserGetSoloBizdevsPost$Params } from '../fn/users/user-get-solo-bizdevs-post';
import { userGetUserByEmailGet } from '../fn/users/user-get-user-by-email-get';
import { UserGetUserByEmailGet$Params } from '../fn/users/user-get-user-by-email-get';
import { userSaasStaffPost } from '../fn/users/user-saas-staff-post';
import { UserSaasStaffPost$Params } from '../fn/users/user-saas-staff-post';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userGetSoloBizdevsPost()` */
  static readonly UserGetSoloBizdevsPostPath = '/user/get-solo-bizdevs';

  /**
   * Get all solo business developers.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGetSoloBizdevsPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGetSoloBizdevsPost$Response(params?: UserGetSoloBizdevsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<User>;
}>> {
    return userGetSoloBizdevsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all solo business developers.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGetSoloBizdevsPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGetSoloBizdevsPost(params?: UserGetSoloBizdevsPost$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<User>;
}> {
    return this.userGetSoloBizdevsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<User>;
}>): {
'count'?: number;
'rows'?: Array<User>;
} => r.body)
    );
  }

  /** Path part for operation `userEnterpriseEnterpriseIdPost()` */
  static readonly UserEnterpriseEnterpriseIdPostPath = '/user/enterprise/{enterprise_id}';

  /**
   * Get all users of an enterprise.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userEnterpriseEnterpriseIdPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  userEnterpriseEnterpriseIdPost$Response(params: UserEnterpriseEnterpriseIdPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<User>;
}>> {
    return userEnterpriseEnterpriseIdPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all users of an enterprise.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userEnterpriseEnterpriseIdPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userEnterpriseEnterpriseIdPost(params: UserEnterpriseEnterpriseIdPost$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<User>;
}> {
    return this.userEnterpriseEnterpriseIdPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<User>;
}>): {
'count'?: number;
'rows'?: Array<User>;
} => r.body)
    );
  }

  /** Path part for operation `userGetUserByEmailGet()` */
  static readonly UserGetUserByEmailGetPath = '/user/get-user-by-email';

  /**
   * Get user details by email.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGetUserByEmailGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGetUserByEmailGet$Response(params: UserGetUserByEmailGet$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return userGetUserByEmailGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user details by email.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGetUserByEmailGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGetUserByEmailGet(params: UserGetUserByEmailGet$Params, context?: HttpContext): Observable<User> {
    return this.userGetUserByEmailGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `userSaasStaffPost()` */
  static readonly UserSaasStaffPostPath = '/user/saas-staff';

  /**
   * Get all admin/operator/superadmin users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userSaasStaffPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSaasStaffPost$Response(params?: UserSaasStaffPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
'rows'?: Array<User>;
}>> {
    return userSaasStaffPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all admin/operator/superadmin users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userSaasStaffPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSaasStaffPost(params?: UserSaasStaffPost$Params, context?: HttpContext): Observable<{
'count'?: number;
'rows'?: Array<User>;
}> {
    return this.userSaasStaffPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
'rows'?: Array<User>;
}>): {
'count'?: number;
'rows'?: Array<User>;
} => r.body)
    );
  }

}
